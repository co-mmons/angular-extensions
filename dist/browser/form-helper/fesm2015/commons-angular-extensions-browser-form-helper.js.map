{"version":3,"file":"commons-angular-extensions-browser-form-helper.js","sources":["ng://@co.mmons/angular-extensions/browser/form-helper/form-helper.ts","ng://@co.mmons/angular-extensions/browser/form-helper/commons-angular-extensions-browser-form-helper.ts"],"sourcesContent":["import {NgModule, Directive, ContentChildren, QueryList, ElementRef, Input, Optional} from \"@angular/core\";\nimport {FormGroup, FormControlName, FormGroupDirective, NgForm, CheckboxControlValueAccessor, AbstractControl} from \"@angular/forms\";\n\n@Directive({\n    selector: \"[ngx-form-helper],[ngxFormHelper]\",\n    exportAs: \"ngxFormHelper\"\n})\nexport class FormHelper {\n\n    constructor(public readonly element: ElementRef<HTMLElement>, @Optional() public readonly ngForm: NgForm, @Optional() private readonly formGroupDirective: FormGroupDirective) {\n    }\n\n    @Input()\n    public get readonly(): boolean {\n        return this.element.nativeElement.hasAttribute(\"readonly\");\n    }\n\n    public set readonly(readonly: boolean) {\n        if (readonly) {\n            this.element.nativeElement.setAttribute(\"readonly\", \"\");\n        } else {\n            this.element.nativeElement.removeAttribute(\"readonly\");\n        }\n    }\n\n    public markAsReadonly() {\n        this.readonly = true;\n    }\n\n    @Input()\n    public get busy(): boolean {\n        return this.element.nativeElement.hasAttribute(\"busy\");\n    }\n\n    public set busy(busy: boolean) {\n        if (busy) {\n            this.element.nativeElement.setAttribute(\"busy\", \"\");\n        } else {\n            this.element.nativeElement.removeAttribute(\"busy\");\n        }\n    }\n\n    public markAsBusy() {\n        this.busy = true;\n    }\n\n    @ContentChildren(FormControlName, {descendants: true})\n    protected readonly contentControls: QueryList<FormControlName>;\n\n    public formControlName(name: string): FormControlName {\n\n        for (let a of this.contentControls.toArray()) {\n            if (a.name == name) {\n                return a;\n            }\n        }\n    }\n\n    public get formGroup(): FormGroup {\n        return this.formGroupDirective ? this.formGroupDirective.form : undefined;\n    }\n\n    public validateAll(markAs: \"touched\" | \"dirty\" = \"touched\") {\n\n        if (!this.formGroupDirective) {\n            return;\n        }\n\n        for (let controlName in this.formGroup.controls) {\n            let control = this.formGroup.controls[controlName];\n\n            if (markAs == \"touched\") {\n                control.markAsTouched();\n            }\n\n            if (markAs == \"dirty\") {\n                control.markAsDirty();\n            }\n\n            control.updateValueAndValidity();\n        }\n        \n        for (let control of this.contentControls.toArray()) {\n            if (!control.valid) {\n                this.focusImpl(control);\n                break;\n            }\n        }\n    }\n\n    private focusImpl(control: string | any, scrollIntoView: boolean = true) {\n\n        if (typeof control == \"string\" && this.formGroupDirective) {\n            for (let c of this.formGroupDirective.directives) {\n                if (c.name == control) {\n                    control = c;\n                    break;\n                }\n            }\n        }\n\n        let elementToScroll: HTMLElement;\n\n        if (control instanceof FormControlName) {\n            let element: HTMLElement = this.element.nativeElement.querySelector(\"[formcontrolname=\" + control.name + \"]\");\n            if (element) {\n                elementToScroll = element;\n                element.focus();\n            }\n        }\n\n        // if (\"setFocus\" in control) {\n        //     control.setFocus();\n        //     elementToScroll = control.getNativeElement().closest(\".item\");\n        // } else if (control && typeof control.focus == \"function\") {\n        //     control.focus();\n        // }\n\n        // if (!elementToScroll && control && control.nativeElement) {\n        //     elementToScroll = control.nativeElement.closest(\".item\") || control.nativeElement;\n        // }\n\n        if (scrollIntoView && elementToScroll) {\n            elementToScroll.scrollIntoView();\n        }\n    }\n\n    public focus(formControlName: string, scrollIntoView: boolean = true) {\n        this.focusImpl(formControlName, scrollIntoView);\n    }\n}\n\n@NgModule({\n    declarations: [FormHelper],\n    bootstrap: [],\n    exports: [FormHelper]\n})\nexport class FormHelperModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}