{"version":3,"file":"commons-angular-extensions-forms.js","sources":["ng://@co.mmons/angular-extensions/forms/update-value-and-validity.ts","ng://@co.mmons/angular-extensions/forms/url-validator.ts","ng://@co.mmons/angular-extensions/forms/commons-angular-extensions-forms.ts"],"sourcesContent":["import {AbstractControl, FormArray, FormGroup} from \"@angular/forms\";\n\nexport function updateValueAndValidity(controlOrControls: AbstractControl | AbstractControl[] | {[control: string]: AbstractControl}, opts?: {onlySelf?: boolean; emitEvent?: boolean; ommit?: AbstractControl[]}) {\n\n    let controls: AbstractControl[];\n\n    if (Array.isArray(controlOrControls)) {\n        controls = controlOrControls;\n    } else if (controlOrControls instanceof AbstractControl) {\n        controls = [controlOrControls];\n    } else if (controlOrControls) {\n        controls = [];\n        for (const k of Object.keys(controlOrControls)) {\n            if (controlOrControls[k]) {\n                controls.push(controlOrControls[k]);\n            }\n        }\n    }\n\n    CONTROLS: for (const control of controls) {\n\n        if (!control) {\n            continue;\n        }\n\n        if (opts && opts.ommit) {\n            for (const c of opts.ommit) {\n                if (c === control) {\n                    continue CONTROLS;\n                }\n            }\n        }\n\n        if (!opts || !opts.onlySelf) {\n            if (control instanceof FormGroup) {\n                const group = (control as FormGroup);\n\n                for (const field in group.controls) {\n                    updateValueAndValidity(group.controls[field], opts);\n                }\n\n            } else if (control instanceof FormArray) {\n                const group = (control as FormArray);\n\n                for (const field in group.controls) {\n                    const c = group.controls[field];\n                    updateValueAndValidity(group.controls[field], opts);\n                }\n            }\n        }\n\n        control.updateValueAndValidity(opts);\n    }\n}\n","import {Directive, forwardRef, NgModule} from \"@angular/core\";\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator} from \"@angular/forms\";\nimport {MessageRef} from \"@co.mmons/js-intl\";\n\nconst urlValidatorRegex = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[\\-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9\\.\\-]+|(?:www\\.|[\\-;:&=\\+\\$,\\w]+@)[A-Za-z0-9\\.\\-]+)((?:\\/[\\+~%\\/\\.\\w\\-_]*)?\\??(?:[\\-\\+=&;%@\\.\\w_]*)#?(?:[\\.\\!\\/\\\\\\w]*))?)/i;\n\nexport const urlValidatorProvider: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => UrlValidator),\n    multi: true\n};\n\n@Directive({\n    selector: '[url][formControlName],[url][formControl],[url][ngModel]',\n    providers: [urlValidatorProvider]\n})\nexport class UrlValidator implements Validator {\n\n    static validate(control: AbstractControl): ValidationErrors {\n\n        const value = control.value;\n\n        if (urlValidatorRegex.test(value)) {\n            return undefined;\n        }\n\n        return {\n            invalidUrl: new MessageRef(\"@co.mmons/angular-extensions/forms\", \"invalidUrlError\")\n        };\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null {\n        return UrlValidator.validate(c);\n    }\n\n}\n\n@NgModule({\n    declarations: [UrlValidator],\n    exports: [UrlValidator]\n})\nexport class UrlValidatorModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__values"],"mappings":"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"}